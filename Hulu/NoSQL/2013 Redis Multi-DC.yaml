---
name: Hulu Redis Multi-DC
reference:
   text: https://content.pivotal.io/blog/case-study-how-hulu-scaled-serving-4-billion-videos-using-redis
description: |
   After evaluating MongoDB, Riak and LevelDB, Hulu went for Redis especially for hset/hget and hgetall types of data access. 
   As Redis sentinel did not exist back then Hulu build a Zookeeper based client load-balancing. To optimize Redis CPU usages 
   Hulu ran 16 Redis instances per host. To avoid disk stalls on "BGSAVE" disk writing is disabled and done nightly by cron.
   
date: 2012-00-00

solutions:
   - Python
   - Redis
   - Zookeeper
   - Cassandra

metrics:
  max-requests: 10k/s
  max-storage: 4 billion records

design-goals:
   - faster write/reads, lower latency
   - cross data center replication
   - 10k queries/s
   - HA for the NoSQL part

limitations:
   - no sentinel at that time -> own solution had to be build

flowchart: |
  [Python Application|[Redis client LB]] -> [<database>Redis Cluster] 
  [Python Application] <- [Zookeeper;(Redis Cluster State)]
  [Redis Cluster] <-> [<database>Cassandra]
  [Redis Cluster] -> [Zookeeper]
  [Cassandra] -- [<note>Cassandra is used as a 
  "cold" DB while active user data 
  is ad-hoc fetched to Redis]
